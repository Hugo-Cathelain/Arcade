///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "../../Arcade/utils/Vec2.hpp"
#include <deque>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc::Nibler
///////////////////////////////////////////////////////////////////////////////

namespace Arc::Nibbler
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Snake
{
private:

    enum class Snake_Color
    {
        RED,
        YELLOW = 6,
        PINK = 12,
        WHITE = 18,
        BLUE = 24
    };
    ///////////////////////////////////////////////////////////////////////////
    // Member data
    ///////////////////////////////////////////////////////////////////////////
    Vec2i mDesiredDirection;        //<!
    Vec2i mDirection;               //<!
    Vec2f mPosition;                //<!
    int mAnimationOffset;           //<!
    Vec2i mDirectionOffset;         //<!
    Vec2i mHeadOffset;             //<!
    Vec2i mTailOffset;             //<!
    float mMovementPercentage;      //<!
    float mMovementSpeed;           //<!
    float mMovementAccumulator;     //<!
    bool isDead;                    //<!
    Snake_Color mSnakeColor;        //<!
    int mLevel;                      //<!
    std::deque<Vec2f> mSnakeParts; //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Snake(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetPosition(const Vec2i& position);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetMovementPercentage(float percentage);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2i GetPosition(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param direction
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetDesiredDirection(const Vec2i& direction);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2i GetDirection(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param key
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetLevel(int level);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param timer
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Draw(float timer);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaSeconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(float deltaSeconds);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param timer
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawSpawnAnimation(float timer);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param timer
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawDeathAnimation(float timer);
};

} // namespace Arc::Nibler
