///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "../../Arcade/utils/Vec2.hpp"
#include <deque>
#include <vector>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc::Nibler
///////////////////////////////////////////////////////////////////////////////

namespace Arc::Nibbler
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Snake
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Color
    {
        RED,
        YELLOW,
        PINK,
        WHITE,
        BLUE
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Part
    {
        Vec2f position;
        Vec2i direction;
        Vec2i desired;
    };

    ///////////////////////////////////////////////////////////////////////////
    // Member data
    ///////////////////////////////////////////////////////////////////////////
    Vec2i mDesiredDirection;                //<!
    Vec2i mDirection;                       //<!
    int mAnimationOffset;                   //<!
    Vec2i mDirectionOffset;                 //<!
    Vec2i mHeadOffset;                      //<!
    Vec2i mTailOffset;                      //<!
    float mMovementPercentage;              //<!
    float mMovementSpeed;                   //<!
    float mMovementAccumulator;             //<!
    bool isDead;                            //<!
    Color mSnakeColor;                      //<!
    int mLevel;                             //<!
    int mLives;                             //<!
    std::vector<Part> mSnakeParts;          //<!
    float mLastEatenTime;                   //<!
    int mSize;                              //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Snake(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetPosition(const Vec2i& position);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetMovementPercentage(float percentage);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2i GetPosition(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2i GetPosition(size_t i) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    size_t GetSize(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param direction
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetDesiredDirection(const Vec2i& direction);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2i GetDirection(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int GetLives(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param key
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetLevel(int level);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param timer
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Draw(float timer);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaSeconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(float deltaSeconds);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Reset(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param timer
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawSpawnAnimation(float timer);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param timer
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawDeathAnimation(float timer);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Grow(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param color
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetColor(Snake::Color color);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    float GetLastEaten(void) const;
};

} // namespace Arc::Nibler
