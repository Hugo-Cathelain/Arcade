///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "../../Arcade/interfaces/IGameState.hpp"
#include "Arcade/utils/Vec2.hpp"
#include "Arcade/enums/Inputs.hpp"
#include "games/NIBBLER/Snake.hpp"
#include "games/NIBBLER/Maps.hpp"
#include "games/NIBBLER/Fruit.hpp"
#include <map>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc::Nibbler
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Game : public IGameState
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class State
    {
        PRESS_START,
        START_PRESSED,
        PLAYING,
        DEATH_ANIMATION
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class TextColor
    {
        TEXT_WHITE,
        TEXT_CYAN,
        TEXT_RED,
        TEXT_YELLOW,
        TEXT_PINK,
        TEXT_BLUE,
        TEXT_GRAY
    };

    ///////////////////////////////////////////////////////////////////////////
    // Member data
    ///////////////////////////////////////////////////////////////////////////
    float mTimer;                                   //<!
    State mState;                                   //<!
    std::unique_ptr<Snake> mSnake;                  //<!
    int mScore;                                     //<!
    std::map<int, std::unique_ptr<Fruit>> mFruits;  //<!
    std::unique_ptr<Maps> mMap;                     //<!
    int mLifes;                                     //<!
    int mLevel;                                     //<!
    int mTimerGame;                                 //<!
    float mAnimationTimer;                          //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Game(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~Game();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitFruit(int level);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawScore(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawSpawningAnimation(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Draws(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleEvents(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CheckForFruitsEaten(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CheckForAllFruitsEaten(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CheckForSelfCollision(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ResetGame(int level);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param std::string& text
    /// \param Game::TextColor color
    /// \param const Vec2i& position
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Text(
        const std::string& text,
        Game::TextColor color,
        const Vec2i& position
    );

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Start the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void BeginPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief End the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void EndPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Tick the game
    ///
    /// \param deltaSeconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Tick(float deltaSeconds) override;
};

} // namespace Arc
