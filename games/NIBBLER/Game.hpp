///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "../../Arcade/interfaces/IGameState.hpp"
#include "Arcade/utils/Vec2.hpp"
#include "Arcade/enums/Inputs.hpp"
#include "games/NIBBLER/Snake.hpp"
#include "games/NIBBLER/Maps.hpp"
#include "games/NIBBLER/Fruit.hpp"
#include <map>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc::Nibbler
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Game : public IGameModule
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class State
    {
        PRESS_START,
        START_PRESSED,
        PLAYING,
        DEATH_ANIMATION
    };

    ///////////////////////////////////////////////////////////////////////////
    // Member data
    ///////////////////////////////////////////////////////////////////////////
    float mTimer;          //<!
    State mState;         //<!
    std::unique_ptr<Snake> mSnake; //<!
    int mScore;         //<!
    std::map<int, std::unique_ptr<Fruit>> mFruits; //<!
    std::unique_ptr<Maps> mMap; //<!
    int mLifes;         //<!
    int mLevel;         //<!


    // bool mGameOver;         //<!
    // float mAccumulatedTime; //<!
    // Vec2i mOffset;          //<!
    // Vec2i mNewOffset;       //<!
    // Vec2i mPosition;        //<!
    // int mScore;             //<!
    // Vec2i mApplePosition;   //<!
    // bool mIngame;           //<!
    // int mBestScore;         //<!
    // std::deque<Vec2i> mSnakeParts; //<!

    // ///////////////////////////////////////////////////////////////////////////
    // /// \brief
    // ///
    // ///////////////////////////////////////////////////////////////////////////
    // enum class TextColor
    // {
    //     TEXT_WHITE,
    //     TEXT_RED,
    //     TEXT_PINK,
    //     TEXT_CYAN,
    //     TEXT_ORANGE,
    //     TEXT_BEIGE,
    //     TEXT_YELLOW
    // };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Game(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~Game();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitFruit(int level);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawScore(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Draws(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleEvents(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CheckForFruitsEaten(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CheckForAllFruitsEaten(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ResetGame(int level);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawSnakeLives(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleSnakeSpeed(void);

    // ///////////////////////////////////////////////////////////////////////////
    // /// \brief
    // ///
    // ///////////////////////////////////////////////////////////////////////////
    // void HandleAmbiantSound(void);


    // ///////////////////////////////////////////////////////////////////////////
    // /// \brief
    // ///
    // void Text(
    //     const std::string& text,
    //     TextColor color,
    //     const Vec2i& position
    // );

    // ///////////////////////////////////////////////////////////////////////////
    // /// \brief
    // ///
    // /// \param key
    // ///
    // ///////////////////////////////////////////////////////////////////////////
    // void handleKeyPressed(EKeyboardKey key);

    // ///////////////////////////////////////////////////////////////////////////
    // /// \brief
    // ///
    // ///////////////////////////////////////////////////////////////////////////
    // void respawnApple(void);

    // ///////////////////////////////////////////////////////////////////////////
    // /// \brief
    // ///
    // ///////////////////////////////////////////////////////////////////////////
    // void drawSpritesSnake(void);

    // ///////////////////////////////////////////////////////////////////////////
    // /// \brief
    // ///
    // ///////////////////////////////////////////////////////////////////////////
    // void moveSnake(void);

    // ///////////////////////////////////////////////////////////////////////////
    // /// \brief
    // ///
    // ///////////////////////////////////////////////////////////////////////////
    // void drawScore(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Start the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void BeginPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief End the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void EndPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Tick the game
    ///
    /// \param deltaSeconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Tick(float deltaSeconds) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool IsGameOver(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual int GetScore(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetName(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetDescription(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the assets of the game
    ///
    /// \return The assets of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetSpriteSheet(void) const override;
};

} // namespace Arc
