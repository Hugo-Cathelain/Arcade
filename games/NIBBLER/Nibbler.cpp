///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "games/NIBBLER/Nibbler.hpp"
#include "Arcade/core/API.hpp"
#include <iostream>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
Nibbler::Nibbler(void)
    : mGameOver(false)
{}

///////////////////////////////////////////////////////////////////////////////
Nibbler::~Nibbler()
{}

///////////////////////////////////////////////////////////////////////////////
void Nibbler::BeginPlay(void)
{
    API::PushEvent(API::Event::GRAPHICS, API::Event::GridSize({16, 16}));
    mDraw.position = {0, 0};
    mDraw.color = {255, 0, 0, 255};
}

///////////////////////////////////////////////////////////////////////////////
void Nibbler::EndPlay(void)
{}

///////////////////////////////////////////////////////////////////////////////
void Nibbler::Tick(float deltaSeconds)
{
    (void)deltaSeconds;
    while (std::optional event = API::PollEvent(API::Event::GAME)) {
        if (auto key = event->GetIf<API::Event::KeyPressed>()) {
            if (key->code == EKeyboardKey::Q) {
                mGameOver = true;
                break;
            }
            if (key->code == EKeyboardKey::UP) mDraw.position.y -= 1;
            if (key->code == EKeyboardKey::DOWN) mDraw.position.y += 1;
            if (key->code == EKeyboardKey::LEFT) mDraw.position.x -= 1;
            if (key->code == EKeyboardKey::RIGHT) mDraw.position.x += 1;
        }
    }

    API::Draw(mDraw);
}

///////////////////////////////////////////////////////////////////////////////
bool Nibbler::IsGameOver(void) const
{
    return (mGameOver);
}

///////////////////////////////////////////////////////////////////////////////
int Nibbler::GetScore(void) const
{
    return (0);
}

///////////////////////////////////////////////////////////////////////////////
std::string Nibbler::GetName(void) const
{
    return ("Nibbler");
}

///////////////////////////////////////////////////////////////////////////////
std::string Nibbler::GetDescription(void) const
{
    return ("Nibbler is a snake game");
}

} // namespace Arc
