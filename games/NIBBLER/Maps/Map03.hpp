///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "../../../Arcade/utils/Vec2.hpp"
#include <vector>
#include "games/NIBBLER/Assets.hpp"

namespace Arc::Nibbler
{

static const std::vector<std::vector<SpriteType>> MAP_03 = {
    { // colum 1
        BORDER_IN_BR, WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT,
        WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT,
        WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT,
        WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT, WALL_LEFT,
        WALL_LEFT, WALL_LEFT, BORDER_IN_TR
    },
    { // colum 2
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT
    },
    { // colum 3
        WALL_TOP, EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY, BORDER_OUT_BR,
        WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, BORDER_OUT_TR, EMPTY, BORDER_OUT_BR,
        BORDER_OUT_TR, EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY,
        BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, BORDER_OUT_TR,
        EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY, WALL_BOT
    },
    { // colum 4
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, BORDER_IN_BR,
        WALL_LEFT, WALL_LEFT, BORDER_OUT_TL, EMPTY, BORDER_OUT_BL,
        BORDER_OUT_TL, EMPTY, BORDER_OUT_BL, BORDER_OUT_TL, EMPTY,
        BORDER_OUT_BL, WALL_LEFT, WALL_LEFT, BORDER_IN_TR, WALL_TOP, EMPTY,
        WALL_BOT, WALL_TOP, EMPTY, WALL_BOT
    },
    { // colum 5
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        WALL_BOT
    },
    { // colum 6
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, BORDER_OUT_TR,
        EMPTY, BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT,
        BORDER_OUT_TR, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP,
        EMPTY, WALL_BOT,
    },
    { // colum 7
        WALL_TOP, EMPTY, BORDER_OUT_BL, BORDER_OUT_TL, EMPTY, BORDER_OUT_BL,
        BORDER_OUT_TL, EMPTY, WALL_BOT, BORDER_IN_BR, WALL_LEFT, WALL_LEFT,
        BORDER_OUT_TL, EMPTY, BORDER_OUT_BL, WALL_LEFT, WALL_LEFT,
        BORDER_IN_TR, WALL_TOP, EMPTY, BORDER_OUT_BL, BORDER_OUT_TL, EMPTY,
        BORDER_OUT_BL, BORDER_OUT_TL, EMPTY, WALL_BOT
    },
    { // colum 8
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT,
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT,
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT
    },
    { // colum 9
        WALL_TOP, EMPTY, BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT,
        BORDER_OUT_TR, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, BORDER_OUT_TR,
        EMPTY, WALL_BOT, WALL_TOP, EMPTY, BORDER_OUT_BR, WALL_RIGHT,
        WALL_RIGHT, WALL_RIGHT, BORDER_OUT_TR, EMPTY, WALL_BOT
    },
    { // colum 10
        WALL_TOP, EMPTY, BORDER_OUT_BL, WALL_LEFT, WALL_LEFT, WALL_LEFT,
        BORDER_OUT_TL, EMPTY, BORDER_OUT_BL, BORDER_OUT_TL, EMPTY,
        BORDER_OUT_BL, WALL_LEFT, WALL_LEFT, WALL_LEFT, BORDER_OUT_TL, EMPTY,
        BORDER_OUT_BL, BORDER_OUT_TL, EMPTY, BORDER_OUT_BL, WALL_LEFT,
        WALL_LEFT, WALL_LEFT, BORDER_OUT_TL, EMPTY, WALL_BOT
    },
    {  // colum 11
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT
    },
    { // colum 12
        WALL_TOP, EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY, BORDER_OUT_BR,
        BORDER_OUT_TR, EMPTY, BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT,
        WALL_RIGHT, BORDER_OUT_TR, EMPTY, BORDER_OUT_BR, WALL_RIGHT,
        WALL_RIGHT, WALL_RIGHT, BORDER_OUT_TR, EMPTY, BORDER_OUT_BR,
        BORDER_OUT_TR, EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        WALL_BOT, BORDER_IN_BR, WALL_LEFT, BORDER_IN_TR, WALL_TOP, EMPTY,
        WALL_BOT, BORDER_IN_BR, WALL_LEFT, BORDER_IN_TR, WALL_TOP, EMPTY,
        WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT,
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        WALL_BOT, WALL_TOP, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        WALL_BOT, BORDER_IN_BL, WALL_RIGHT, BORDER_IN_TL, WALL_TOP, EMPTY,
        WALL_BOT, BORDER_IN_BL, WALL_RIGHT, BORDER_IN_TL, WALL_TOP, EMPTY,
        WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, BORDER_OUT_BL, BORDER_OUT_TL, EMPTY, BORDER_OUT_BL,
        BORDER_OUT_TL, EMPTY, BORDER_OUT_BL, WALL_LEFT, WALL_LEFT,
        WALL_LEFT, BORDER_OUT_TL, EMPTY, BORDER_OUT_BL, WALL_LEFT,
        WALL_LEFT, WALL_LEFT, BORDER_OUT_TL, EMPTY, BORDER_OUT_BL,
        BORDER_OUT_TL, EMPTY, BORDER_OUT_BL, BORDER_OUT_TL, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT,
        BORDER_OUT_TR, EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY,
        BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, BORDER_OUT_TR,
        EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY, BORDER_OUT_BR, WALL_RIGHT,
        WALL_RIGHT, WALL_RIGHT, BORDER_OUT_TR, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, BORDER_OUT_BL, WALL_LEFT, WALL_LEFT, WALL_LEFT,
        BORDER_OUT_TL, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        BORDER_OUT_BL, WALL_LEFT, WALL_LEFT, WALL_LEFT, BORDER_OUT_TL,
        EMPTY, WALL_BOT, WALL_TOP, EMPTY, BORDER_OUT_BL, WALL_LEFT,
        WALL_LEFT, WALL_LEFT, BORDER_OUT_TL, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT,
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT,
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY, BORDER_OUT_BR,
        BORDER_OUT_TR, EMPTY, WALL_BOT, BORDER_IN_BL, WALL_RIGHT, WALL_RIGHT,
        BORDER_OUT_TR, EMPTY, BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT,
        BORDER_IN_TL, WALL_TOP, EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY,
        BORDER_OUT_BR, BORDER_OUT_TR, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        BORDER_OUT_BL, WALL_LEFT, WALL_LEFT, WALL_LEFT, BORDER_OUT_TL,
        EMPTY, BORDER_OUT_BL, WALL_LEFT, WALL_LEFT, WALL_LEFT,
        BORDER_OUT_TL, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP,
        EMPTY, WALL_BOT,
    },
    {
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY,
        WALL_BOT
    },
    {
        WALL_TOP, EMPTY, WALL_BOT, WALL_TOP, EMPTY, WALL_BOT, BORDER_IN_BL,
        WALL_RIGHT, WALL_RIGHT, BORDER_OUT_TR, EMPTY, BORDER_OUT_BR,
        BORDER_OUT_TR, EMPTY, BORDER_OUT_BR, BORDER_OUT_TR, EMPTY,
        BORDER_OUT_BR, WALL_RIGHT, WALL_RIGHT, BORDER_IN_TL, WALL_TOP, EMPTY,
        WALL_BOT, WALL_TOP, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, BORDER_OUT_BL, BORDER_OUT_TL, EMPTY, BORDER_OUT_BL,
        WALL_LEFT, WALL_LEFT, WALL_LEFT, BORDER_OUT_TL, EMPTY, BORDER_OUT_BL,
        BORDER_OUT_TL, EMPTY, BORDER_OUT_BL, BORDER_OUT_TL, EMPTY,
        BORDER_OUT_BL, WALL_LEFT, WALL_LEFT, WALL_LEFT, BORDER_OUT_TL,
        EMPTY, BORDER_OUT_BL, BORDER_OUT_TL, EMPTY, WALL_BOT
    },
    {
        WALL_TOP, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WALL_BOT },
    {
        BORDER_IN_BL, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT,
        WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT,
        WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT,
        WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, WALL_RIGHT,
        WALL_RIGHT, WALL_RIGHT, WALL_RIGHT, BORDER_IN_TL
    },
};

static const std::vector<Vec2i> MAP_03_FRUIT = {
    {4, 1}, {13, 1}, {22, 1},
    {10, 3}, {16, 3},
    {4, 4}, {13, 4}, {22, 4},
    {1, 7}, {4, 7}, {13, 7}, {22, 7}, {25, 7},
    {10, 9}, {16, 9},
    {7, 13}, {13, 13}, {19, 13},
    {10, 17}, {16, 17},
    {1, 19}, {4, 19}, {13, 19}, {22, 19}, {25, 19},
    {4, 22}, {13, 22}, {22, 22},
};

} // namespace Arc::Nibbler