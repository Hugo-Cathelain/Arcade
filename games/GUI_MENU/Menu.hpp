///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/interfaces/IGameModule.hpp"
#include "Arcade/utils/Vec2.hpp"
#include "games/GUI_MENU/Axolotl.hpp"
#include <string>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class MenuGUI : public IGameModule
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class TextColor
    {
        TEXT_WHITE,
        TEXT_RED,
        TEXT_PINK,
        TEXT_CYAN,
        TEXT_ORANGE,
        TEXT_BEIGE,
        TEXT_YELLOW,
        TEXT_GREEN
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    // Member data
    ///////////////////////////////////////////////////////////////////////////
    bool mGameOver;                         //<!
    int mCurrentGame;                       //<!
    std::vector<std::string> mGames;        //<!
    std::vector<std::string> mGraphicals;   //<!
    float mTimer;                           //<!
    std::string mUserName;                  //<!
    bool mUserNameSelected;                 //<!
    Axolotl mAxolotl;                       //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    MenuGUI(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~MenuGUI();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param text
    /// \param color
    /// \param position
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Text(
        const std::string& text,
        TextColor color,
        const Vec2i& position
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleEvents(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawBootAnimation(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawUsernameSelection(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawGameSelection(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Start the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void BeginPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief End the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void EndPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Tick the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Tick(float deltaSeconds) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Check if the game is over
    ///
    /// \return True if the game is over, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool IsGameOver(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the score
    ///
    /// \return The score
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual int GetScore(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the name of the game
    ///
    /// \return The name of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetName(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the description of the game
    ///
    /// \return The description of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetDescription(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the assets of the game
    ///
    /// \return The assets of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetSpriteSheet(void) const override;
};

} // namespace Arc
