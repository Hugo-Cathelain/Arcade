///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "../../Arcade/interfaces/IGameState.hpp"
#include "games/PACMAN/Player.hpp"
#include "games/PACMAN/Ghost.hpp"
#include <map>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc::Pacman
///////////////////////////////////////////////////////////////////////////////
namespace Arc::Pacman
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Game : public IGameState
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class GumType
    {
        SMALL,
        BIG
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class State
    {
        PRESS_START,
        START_PRESSED,
        PLAYING,
        DEATH_ANIMATION,
        GAME_OVER
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class SpeedType
    {
        PACMAN_NORM,
        PACMAN_NORM_DOTS,
        PACMAN_FRIGHT,
        PACMAN_FIGHT_DOTS,
        GHOST_NORM,
        GHOST_FRIGHT,
        GHOST_TUNNEL,
        SPEED_TYPE_COUNT
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static const std::vector<float> SPEEDS[4];          //<!
    static const std::vector<float> MODES[3];           //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    float mTimer;                                       //<!
    State mState;                                       //<!
    std::map<int, GumType> mGums;                       //<!
    std::unique_ptr<Player> mPlayer;                    //<!
    int mScore;                                         //<!
    std::unique_ptr<Ghost> mBlinky;                     //<!
    std::unique_ptr<Ghost> mPinky;                      //<!
    std::unique_ptr<Ghost> mInky;                       //<!
    std::unique_ptr<Ghost> mClyde;                      //<!
    Ghost::Type mEatenGhost;                            //<!
    float mPowerPillTimer;                              //<!
    int mKillCount;                                     //<!
    std::map<int, std::tuple<float, Vec2i>> mEatTimer;  //<!
    int mHealth;                                        //<!
    int mLevel;                                         //<!
    std::vector<float> mSpeeds;                         //<!
    std::vector<float> mModeTimers;                     //<!
    float mModeTimer;                                   //<!
    int mModeIndex;                                     //<!
    float mSoundTimer;                                  //<!
    float mAnimationTimer;                              //<!
    bool mShowWhiteMap;                                 //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Game(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~Game();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetDefaultGums(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawMapBaseLayer(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawScore(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawGums(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawEatScore(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleEvents(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandlePowerPill(float deltaSeconds);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CheckForGumsEaten(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CheckForGhostsCollisions(std::unique_ptr<Ghost>& ghost);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CheckForAllGumsEaten(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ResetGame(int level);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DrawPacmanLives(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandlePacmanSpeed(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleAmbiantSound(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void BeginPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaSeconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Tick(float deltaSeconds) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void EndPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool IsGameOver(void) const;
};

} // namespace Arc::Pacman
