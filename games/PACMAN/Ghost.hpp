///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/utils/Vec2.hpp"
#include "Arcade/enums/Inputs.hpp"
#include <vector>
#include <random>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Ghost
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum Type
    {
        BLINKY,     //<! Red - chases Pacman directly
        PINKY,      //<! Pink - tries to ambush Pacman
        INKY,       //<! Cyan - unpredictable movement
        CLYDE       //<! Orange - random movement
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum State
    {
        SCATTER,        //<! Ghosts move to their respective corners
        CHASE,          //<! Ghosts chase Pacman
        FRIGHTENED,     //<! Ghosts run away from Pacman
        EATEN           //<! Ghosts are eaten by Pacman
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Type mType;                 //<!
    State mState;               //<!
    Vec2i mPosition;            //<!
    float mAccumulatedTime;     //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    /// \param startPos
    ///
    ///////////////////////////////////////////////////////////////////////////
    Ghost(Type type, const Vec2i& startPos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Ghost() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaSeconds
    /// \param pacmanPos
    /// \param pacmanDirection
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(
        float deltaSeconds,
        const Vec2i& pacmanPos
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Draw(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SwitchState(State state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetPosition(const Vec2i& position);
};

} // namespace Arc
