///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "../../Arcade/utils/Vec2.hpp"
#include "games/PACMAN/Player.hpp"
#include <memory>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc::Pacman
///////////////////////////////////////////////////////////////////////////////
namespace Arc::Pacman
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Ghost
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Type
    {
        BLINKY,
        PINKY,
        INKY,
        CLYDE,
        NONE
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class State
    {
        FRIGHTENED,
        CHASE,
        SCATTER,
        EATEN
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static const Vec2i CORNER_TARGETS[4];   //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Type mType;                             //<!
    State mState;                           //<!
    Vec2f mPosition;                        //<!
    Vec2i mDirection;                       //<!
    Vec2i mTarget;                          //<!
    Vec2i mNextTile;                        //<!
    float mMovementPercentage;              //<!
    float mMovementSpeed;                   //<!
    float mMovementAccumulator;             //<!
    bool mInGhostHouse;                     //<!
    float mAccumulator;                     //<!
    int mCounter;                           //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Ghost(Type type);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pacmanPos
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CalculateBlinkyTarget(std::unique_ptr<Player>& pacman);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pacmanPos
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CalculatePinkyTarget(std::unique_ptr<Player>& pacman);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pacmanPos
    /// \param blinkyPos
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CalculateInkyTarget(
        std::unique_ptr<Player>& pacman,
        const Vec2i& blinkyPos
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pacmanPos
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CalculateClydeTarget(std::unique_ptr<Player>& pacman);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CalculateFrightenedDirection(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CalculateBestDirection(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleTunnelPassage(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleGhostHouseExit(float speed);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleGhostInHouse(float speed);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param percentage
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetMovementPercentage(float percentage);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Type GetType(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2i GetPosition(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetPosition(const Vec2i& position);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    State GetState(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetState(State state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaSeconds
    /// \param pacmanPos
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(
        float deltaSeconds,
        std::unique_ptr<Player>& pacman,
        const Vec2i& blinkyPos
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param timer
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Draw(float timer);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void IncrementCounter(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ResetCounter(void);
};

} // namespace Arc::Pacman
