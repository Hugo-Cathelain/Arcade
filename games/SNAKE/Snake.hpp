///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/interfaces/IGameModule.hpp"
#include "Arcade/utils/Vec2.hpp"
#include "Arcade/enums/Inputs.hpp"
#include <deque>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Snake : public IGameModule
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Member data
    ///////////////////////////////////////////////////////////////////////////
    bool mGameOver;         //<!
    float mAccumulatedTime; //<!
    Vec2i mOffset;          //<!
    Vec2i mNewOffset;          //<!
    Vec2i mPosition;        //<!
    int mScore;             //<!
    Vec2i mApplePosition;   //<!
    std::deque<Vec2i> mSnakeParts; //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Snake(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Snake();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param key
    ///
    ///////////////////////////////////////////////////////////////////////////
    void handleKeyPressed(EKeyboardKey key);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void respawnApple(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void drawSpritesSnake(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void moveSnake(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void drawScore(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Start the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void BeginPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief End the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void EndPlay(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Tick the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Tick(float deltaSeconds) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Check if the game is over
    ///
    /// \return True if the game is over, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool IsGameOver(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the score
    ///
    /// \return The score
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual int GetScore(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the name of the game
    ///
    /// \return The name of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetName(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the description of the game
    ///
    /// \return The description of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetDescription(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the assets of the game
    ///
    /// \return The assets of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetSpriteSheet(void) const override;
};

} // namespace Arc
