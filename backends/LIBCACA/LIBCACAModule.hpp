///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/interfaces/IGraphicsModule.hpp"
#include "Arcade/enums/Inputs.hpp"
#include <caca.h>
#include <iostream>
#include <thread>
#include <chrono>
#include <memory>
#include <unordered_map>
#include "utils/Vec2.hpp"
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief The LIBCACAModule class
///
///////////////////////////////////////////////////////////////////////////////
class LIBCACAModule : public IGraphicsModule
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct EntityInterpolation
    {
        Vec2f current;
        Vec2f target;
        float factor;
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    // Data members
    ///////////////////////////////////////////////////////////////////////////
    caca_display_t *mWindow;                    //<! The window/canva
    caca_canvas_t *mCanva;                      //<! The Renderer
    SDL_Surface *mSpriteSheet;                  //<! The texture
    SDL_Surface *rgbImage;                      //<! rgb value of image
    float mRatio;                               //<! The scaling ratio
    float mCanvaRatio;                          //<! The canva scaling ratio
    std::unordered_map<
        int, EntityInterpolation
    > mSpritePositions;                         //<!
    float mInterpolationFactor;                 //<!
    uint32_t mLastFrameTime;                    //<!
    float mWindowWidth;                         //<!
    float mWindowHeight;                        //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    LIBCACAModule(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~LIBCACAModule();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Convert a caca key to an Arcade key
    ///
    /// \param key The caca key
    ///
    /// \return The Arcade key
    ///
    ///////////////////////////////////////////////////////////////////////////
    EKeyboardKey GetKey(int key);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Convert a caca mouse press to an Arcade mouse press
    ///
    /// \param key The caca mouse press
    ///
    /// \return The Arcade mouse press
    ///
    ///////////////////////////////////////////////////////////////////////////
    EMouseButton GetMousePress(int click);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Update(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Clear the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Clear(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Render the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Render(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Set the title of the graphics module
    ///
    /// \param title The title of the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void SetTitle(const std::string& title) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Load sprite sheet
    ///
    /// \param path The path to the sprite sheet
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void LoadSpriteSheet(const std::string& path) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the name of the library
    ///
    /// \return The name of the library
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetName(void) const override;
};

} // namespace Arc
