///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/interfaces/IGraphicsModule.hpp"
#include "Arcade/enums/Inputs.hpp"
#include <ncurses.h>
#include <memory>
#include <map>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief The SFMLModule class
///
///////////////////////////////////////////////////////////////////////////////
class NCURSESModule : public IGraphicsModule
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Data members
    ///////////////////////////////////////////////////////////////////////////
    WINDOW* mWindow;
    std::map<std::tuple<short, short, short>, int> mColorMap;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    NCURSESModule(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~NCURSESModule();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitColor(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param r
    /// \param g
    /// \param b
    ///
    ///////////////////////////////////////////////////////////////////////////
    int FindOrCreateColor(short r, short g, short b);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the key
    ///
    /// \param key The key
    /// \return The keyboard key
    ///
    ///////////////////////////////////////////////////////////////////////////
    EKeyboardKey GetKey(int key);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ResetNCURSES(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Update(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Clear the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Clear(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Render the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Render(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Set the title of the graphics module
    ///
    /// \param title The title of the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void SetTitle(const std::string& title) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Load sprite sheet
    ///
    /// \param path The path to the sprite sheet
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void LoadSpriteSheet(const std::string& path) override;
};

} // namespace Arc
