///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/interfaces/IGraphicsModule.hpp"
#include "Arcade/enums/Inputs.hpp"
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{
///////////////////////////////////////////////////////////////////////////////
/// \brief The SDL2Module class
///
///////////////////////////////////////////////////////////////////////////////
class SDL2Module : public IGraphicsModule
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Data members
    ///////////////////////////////////////////////////////////////////////////
    SDL_Window* mWindow;                        //<! The window container
    SDL_Renderer* mRenderer;                    //<! The rendering
    SDL_Texture* mSpriteSheet;                  //<! The texture
    float mRatio;                               //<! The scaling ratio

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    SDL2Module(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~SDL2Module();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Convert a SDL2 key to an Arcade key
    ///
    /// \param key The SDL2 key
    ///
    /// \return The Arcade key
    ///
    ///////////////////////////////////////////////////////////////////////////
    EKeyboardKey GetKey(SDL_Keycode key);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Convert a SDL2 mouse press to an Arcade mouse press
    ///
    /// \param key The SDL2 mouse press
    ///
    /// \return The Arcade mouse press
    ///
    ///////////////////////////////////////////////////////////////////////////
    EMouseButton GetMousePress(Uint8 click);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Update(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Clear the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Clear(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Render the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Render(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Set the title of the graphics module
    ///
    /// \param title The title of the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void SetTitle(const std::string& title) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Load sprite sheet
    ///
    /// \param path The path to the sprite sheet
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void LoadSpriteSheet(const std::string& path) override;
};

} // namespace Arc
