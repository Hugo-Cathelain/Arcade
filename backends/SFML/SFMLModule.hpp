///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/interfaces/IGraphicsModule.hpp"
#include "Arcade/enums/Inputs.hpp"
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief The SFMLModule class
///
///////////////////////////////////////////////////////////////////////////////
class SFMLModule : public IGraphicsModule
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Data members
    ///////////////////////////////////////////////////////////////////////////
    std::unique_ptr<sf::RenderWindow> mWindow;  //<! The window

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    SFMLModule(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~SFMLModule();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Convert a SFML key to an Arcade key
    ///
    /// \param key The SFML key
    ///
    /// \return The Arcade key
    ///
    ///////////////////////////////////////////////////////////////////////////
    EKeyboardKey GetKey(sf::Keyboard::Key key);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Update(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Clear the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Clear(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Render the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Render(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Set the title of the graphics module
    ///
    /// \param title The title of the graphics module
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void SetTitle(const std::string& title) override;
};

} // namespace Arc
