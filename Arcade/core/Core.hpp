///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/interfaces/IGraphicsModule.hpp"
#include "Arcade/interfaces/IGameModule.hpp"
#include "Arcade/shared/Joystick.hpp"
#include "Arcade/shared/WiiMote.hpp"
#include "Arcade/enums/Inputs.hpp"
#include <memory>
#include <string>
#include <stack>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Core
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static constexpr int MOTION_HISTORY_SIZE = 15;          //<!
    static constexpr float GESTURE_START_THRESHOLD = 60.0f; //<!
    static constexpr float GESTURE_END_THRESHOLD = 30.0f;   //<!
    static constexpr float DEADZONE = 20.0f;                //<!
    static constexpr float COOLDOWN_TIME = 0.3f;            //<!
    static constexpr float MIN_GESTURE_DURATION = 0.08f;    //<!
    static constexpr float ALPHA = 0.3f;                    //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    // Member data
    ///////////////////////////////////////////////////////////////////////////
    std::shared_ptr<Arc::IGraphicsModule> mGraphics;        //<!
    std::stack<std::shared_ptr<Arc::IGameModule>> mStates;  //<!
    bool mIsWindowOpen;                                     //<!
    int mGraphicLibIdx{0};                                  //<!
    int mGameLibIdx{0};                                     //<!
    float mTimer;                                           //<!
    std::map<std::string, std::string> mGraphicLibs;        //<!
    std::map<std::string, std::string> mGameLibs;           //<!
    std::string mGraphicLib;                                //<!
    std::string mGameLib;                                   //<!
    std::map<Joystick::Axis, bool> mAxisPressed;            //<!
    priv::EnumArray<
        WiiMote::Button, bool, WiiMote::buttonCount
    > mButtonPressed;                                       //<!
    std::string mUserName;                                  //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param graphicLib
    /// \param gameLib
    ///
    ///////////////////////////////////////////////////////////////////////////
    Core(const std::string& graphicLib, const std::string& gameLib);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleEvents(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void GetLibraries(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param axis
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int IsAxisPressed(Joystick::Axis axis);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleJoystick(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleWiiMote(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RefreshLibraries(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Run(void);
};

} // namespace Arc
