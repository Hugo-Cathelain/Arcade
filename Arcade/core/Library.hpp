///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <memory>
#include <string>
#include <optional>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Library
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param path
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    static std::shared_ptr<T> Load(const std::string& path);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param path
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    static std::optional<std::string> Is(const std::string& path);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param path
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    static void Unload(std::shared_ptr<T>& object);
};

} // namespace Arc

///////////////////////////////////////////////////////////////////////////////
// Implementation
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/core/Library.inl"
