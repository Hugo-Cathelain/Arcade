///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/shared/EnumArray.hpp"
#include <string>
#include <linux/input.h>
#include <fcntl.h>
#include <libudev.h>
#include <linux/joystick.h>
#include <memory>
#include <ostream>
#include <poll.h>
#include <string>
#include <unistd.h>
#include <vector>
#include <cerrno>
#include <cstring>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Joystick
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static constexpr unsigned int Count{8};         //<!
    static constexpr unsigned int ButtonCount{32};  //<!
    static constexpr unsigned int AxisCount{8};     //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Axis
    {
        X,          //<!
        Y,          //<!
        Z,          //<!
        R,          //<!
        U,          //<!
        V,          //<!
        PovX,       //<!
        PovY        //<!
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Identification
    {
        std::string name{"No Joystick"};    //<!
        unsigned int vendorID;              //<!
        unsigned int productID;             //<!
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param joystick
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool IsConnected(unsigned int joystick);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param joystick
    ///
    /// \return
    ////
    ///////////////////////////////////////////////////////////////////////////
    static unsigned int GetButtonCount(unsigned int joystick);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param joystick
    /// \param axis
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool HasAxis(unsigned int joystick, Axis axis);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param joystick
    /// \param button
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool IsButtonPressed(unsigned int joystick, unsigned int button);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param joystick
    /// \param axis
    ///
    /// \return
    ////
    ///////////////////////////////////////////////////////////////////////////
    static float GetAxisPosition(unsigned int joystick, Axis axis);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param joystick
    ///
    /// \return
    ////
    ///////////////////////////////////////////////////////////////////////////
    static Identification GetIdentification(unsigned int joystick);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Update(void);
};

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc::priv
///////////////////////////////////////////////////////////////////////////////
namespace priv
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct JoystickRecord
{
    std::string deviceNode;
    std::string systemPath;
    bool plugged{};
};

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
using JoystickList = std::vector<JoystickRecord>;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct JoystickCaps
{
    unsigned int buttonCount{};
    EnumArray<Joystick::Axis, bool, Joystick::AxisCount> axes{};
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct JoystickState
{
    bool connected{};
    EnumArray<Joystick::Axis, float, Joystick::AxisCount> axes{};
    std::array<bool, Joystick::ButtonCount> buttons{};
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct UdevDeleter
{
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param device
    ///
    ///////////////////////////////////////////////////////////////////////////
    void operator()(udev_device* device) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param monitor
    ///
    ///////////////////////////////////////////////////////////////////////////
    void operator()(udev_monitor* monitor) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param enumerate
    ///
    ///////////////////////////////////////////////////////////////////////////
    void operator()(udev_enumerate* enumerate) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param context
    ///
    ///////////////////////////////////////////////////////////////////////////
    void operator()(udev* context) const;
};

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
template <typename T>
using UdevPtr = std::unique_ptr<T, UdevDeleter>;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class JoystickImpl
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    int mFile{-1};                              //<!
    std::array<char, ABS_CNT> mMapping{};       //<!
    JoystickState mState;                       //<!
    Joystick::Identification mIdentification;   //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param udevDevice
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool IsJoystick(udev_device* udevDevice);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param udevDevice
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void UpdatePluggedList(udev_device* udevDevice = nullptr);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool HasMonitorEvent(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param udevDevice
    /// \param attributeName
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static const char* GetUdevAttribute(
        udev_device* udevDevice, const std::string& attributeName);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param udevDevice
    /// \param attributeName
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static const char* GetUsbAttribute(
        udev_device* udevDevice, const std::string& attributeName);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param udevDevice
    /// \param attributeName
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static unsigned int GetUsbAttributeUint(
        udev_device* udevDevice, const std::string& attributeName);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param udevDevice
    /// \param attributeName
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static unsigned int GetUdevAttributeUint(
        udev_device* udevDevice, const std::string& attributeName);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static unsigned int GetJoystickVendorID(unsigned int index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static unsigned int GetJoystickProductID(unsigned int index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static std::string GetJoystickName(unsigned int index);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Initialize(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Cleanup(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool IsConnected(unsigned int index);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool Open(unsigned int index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Close(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    JoystickCaps GetCapabilities(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Joystick::Identification GetIdentification(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    JoystickState Update(void);
};

} // namespace Arc::priv

} // namespace Arc
