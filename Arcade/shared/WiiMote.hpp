///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/shared/EnumArray.hpp"
#include <wiiuse.h>
#include <array>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class WiiMote
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static constexpr unsigned int maxWiiMotes{4};   //<!
    static constexpr unsigned int buttonCount{11};  //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Button
    {
        A,
        B,
        Up,
        Down,
        Left,
        Right,
        Minus,
        Plus,
        One,
        Two,
        Home
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Accelerometer
    {
        float roll{0.f};        //<!
        float pitch{0.f};       //<!
        float yaw{0.f};         //<!
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Item
    {
        bool connected{};
        priv::EnumArray<Button, bool, buttonCount> buttons{};
        priv::EnumArray<Button, bool, buttonCount> justButtons{};
        Accelerometer accelerometer{};
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static wiimote** mHandle;                           //<!
    static std::array<Item, maxWiiMotes> mWiiMotes;     //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool IsConnected(unsigned int index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Initialize(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Cleanup(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Update(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    /// \param on
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Rumble(unsigned int index, bool on);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool Find(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool Connect(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    /// \param button
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool IsButtonPressed(unsigned int index, Button button);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    /// \param button
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool IsButtonJustPressed(unsigned int index, Button button);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    ///////////////////////////////////////////////////////////////////////////
    static const Accelerometer& GetAccelerometer(unsigned int index);
};

} // namespace Arc
