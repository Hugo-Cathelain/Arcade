///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Arcade/shared/Joystick.hpp"
#include <array>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc::priv
///////////////////////////////////////////////////////////////////////////////
namespace Arc::priv
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class JoystickManager
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Item
    {
        JoystickImpl joystick;                      //<!
        JoystickState state;                        //<!
        JoystickCaps capabilities;                  //<!
        Joystick::Identification identification;    //<!
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    std::array<Item, Joystick::Count> mJoysticks;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    JoystickManager(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~JoystickManager();

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    JoystickManager(const JoystickManager&) = delete;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    JoystickManager& operator=(const JoystickManager&) = delete;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static JoystickManager& GetInstance(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param joystick
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const JoystickCaps& GetCapabilities(unsigned int joystick) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param joystick
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const JoystickState& GetState(unsigned int joystick) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param joystick
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const Joystick::Identification& GetIdentification(
        unsigned int joystick) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(void);
};

} // namespace Arc::priv
