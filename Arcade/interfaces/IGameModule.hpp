///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <string>
#include <vector>
#include <map>

///////////////////////////////////////////////////////////////////////////////
// Namespace Arc
///////////////////////////////////////////////////////////////////////////////
namespace Arc
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class IGameModule
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    class Asset
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        //
        ///////////////////////////////////////////////////////////////////////
        using Vec2 = struct {int x; int y;};

    public:
        ///////////////////////////////////////////////////////////////////////
        // Member data
        ///////////////////////////////////////////////////////////////////////
        Vec2 position;                      //<!
        std::string characters;             //<!
        Vec2 size;                          //<!

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Asset(Vec2 position, std::string character = "  ", Vec2 size = {8, 8})
            : position(position)
            , characters(character)
            , size(size)
        {};
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    IGameModule(void) = default;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~IGameModule() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Start the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void BeginPlay(void) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief End the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void EndPlay(void) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Tick the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Tick(float deltaSeconds) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Check if the game is over
    ///
    /// \return True if the game is over, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool IsGameOver(void) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the score
    ///
    /// \return The score
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual int GetScore(void) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the name of the game
    ///
    /// \return The name of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetName(void) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the description of the game
    ///
    /// \return The description of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetDescription(void) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the assets of the game
    ///
    /// \return The assets of the game
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string GetSpriteSheet(void) const = 0;
};

} // namespace Arc
